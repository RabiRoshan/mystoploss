{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Text","Typography","App","useState","positionType","setPositionType","amount","setAmount","stoplossPercentage","setStoplossPercentage","targetPercentage","setTargetPercentage","stoplossAmount","setStoplossAmount","targetAmount","setTargetAmount","useEffect","stoplossValue","targetValue","className","strong","defaultChecked","checked","onChange","value","defaultValue","step","formatter","replace","parser","min","max","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a915fd9a.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { Typography, InputNumber, Switch } from \"antd\";\n\nconst { Text } = Typography;\n\nfunction App() {\n  const [positionType, setPositionType] = useState(\"buy\");\n\n  const [amount, setAmount] = useState(0);\n  const [stoplossPercentage, setStoplossPercentage] = useState(0.3);\n  const [targetPercentage, setTargetPercentage] = useState(0.5);\n\n  const [stoplossAmount, setStoplossAmount] = useState(0);\n  const [targetAmount, setTargetAmount] = useState(0);\n\n  useEffect(() => {\n    const stoplossValue = (amount * stoplossPercentage) / 100;\n    const targetValue = (amount * targetPercentage) / 100;\n\n    if (positionType === \"buy\") {\n      setStoplossAmount(amount - stoplossValue);\n      setTargetAmount(amount + targetValue);\n    } else if (positionType === \"sell\") {\n      setStoplossAmount(amount + stoplossValue);\n      setTargetAmount(amount - targetValue);\n    }\n  }, [amount, stoplossPercentage, targetPercentage, positionType]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"row\">\n        <div className=\"inputLabelContainer buySellToggle\">\n          <Text strong className=\"inputLabel\">\n            Sell\n          </Text>\n          <Switch\n            defaultChecked\n            checked={positionType === \"buy\"}\n            onChange={(value) =>\n              value ? setPositionType(\"buy\") : setPositionType(\"sell\")\n            }\n          />\n          <Text strong className=\"inputLabel\">\n            Buy\n          </Text>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"inputLabelContainer\">\n          <Text strong className=\"inputLabel\">\n            Amount:{\" \"}\n          </Text>\n          <InputNumber\n            defaultValue={0}\n            value={amount}\n            step={0.1}\n            formatter={(value) =>\n              `₹ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \"\")\n            }\n            parser={(value) => value.replace(/₹\\s?|(,*)/g, \"\")}\n            onChange={(value) => setAmount(value)}\n          />\n        </div>\n        <div className=\"inputLabelContainer\">\n          <Text strong className=\"inputLabel\">\n            Stoploss %:{\" \"}\n          </Text>\n          <InputNumber\n            defaultValue={0}\n            value={stoplossPercentage}\n            step={0.1}\n            min={0}\n            max={100}\n            formatter={(value) => `${value}%`}\n            parser={(value) => value.replace(\"%\", \"\")}\n            onChange={(value) => setStoplossPercentage(value)}\n          />\n        </div>\n        <div className=\"inputLabelContainer\">\n          <Text strong className=\"inputLabel\">\n            Target %:{\" \"}\n          </Text>\n          <InputNumber\n            defaultValue={0}\n            value={targetPercentage}\n            step={0.1}\n            min={0}\n            max={100}\n            formatter={(value) => `${value}%`}\n            parser={(value) => value.replace(\"%\", \"\")}\n            onChange={(value) => setTargetPercentage(value)}\n          />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"inputLabelContainer\">\n          <Text strong className=\"inputLabel\">\n            Stoploss:{\" \"}\n          </Text>\n          <InputNumber\n            defaultValue={0}\n            value={stoplossAmount}\n            step={0.1}\n            formatter={(value) =>\n              `₹ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \"\")\n            }\n            parser={(value) => value.replace(/₹\\s?|(,*)/g, \"\")}\n            disabled\n          />\n        </div>\n        <div className=\"inputLabelContainer\">\n          <Text strong className=\"inputLabel\">\n            Target:{\" \"}\n          </Text>\n          <InputNumber\n            defaultValue={0}\n            value={targetAmount}\n            step={0.1}\n            formatter={(value) =>\n              `₹ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \"\")\n            }\n            parser={(value) => value.replace(/₹\\s?|(,*)/g, \"\")}\n            disabled\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}